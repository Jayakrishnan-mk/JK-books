import Joi from 'joi';

// pluralize
var p = function (word, num) {
    if (num === void 0) { num = 0; }
    return (num === 1 ? word : word + "s");
};
var isPositive = function (num) {
    if (num === void 0) { num = 0; }
    return Number(num > 0);
};
var clamp = function (value, min, max) { return (value < min ? min : value > max ? max : value); };
var defaultOptions = {
    min: 8,
    max: 26,
    lowerCase: 1,
    upperCase: 1,
    numeric: 1,
    symbol: 1,
    requirementCount: 4,
};
var index = (function (_a, label) {
    var _b = _a === void 0 ? defaultOptions : _a, _c = _b.min, min = _c === void 0 ? 0 : _c, _d = _b.max, max = _d === void 0 ? 0 : _d, _e = _b.lowerCase, lowerCase = _e === void 0 ? 0 : _e, _f = _b.upperCase, upperCase = _f === void 0 ? 0 : _f, _g = _b.numeric, numeric = _g === void 0 ? 0 : _g, _h = _b.symbol, symbol = _h === void 0 ? 0 : _h, _j = _b.requirementCount, requirementCount = _j === void 0 ? 0 : _j;
    if (label === void 0) { label = '{{#label}}'; }
    var joiPasswordComplexity = {
        type: 'passwordComplexity',
        base: Joi.string(),
        messages: {
            'passwordComplexity.tooShort': label + " should be at least " + min + " " + p('character', min) + " long",
            'passwordComplexity.tooLong': label + " should not be longer than " + max + " " + p('character', max),
            'passwordComplexity.lowercase': label + " should contain at least " + lowerCase + " lower-cased " + p('letter', lowerCase),
            'passwordComplexity.uppercase': label + " should contain at least " + upperCase + " upper-cased " + p('letter', upperCase),
            'passwordComplexity.numeric': label + " should contain at least " + numeric + " " + p('number', numeric),
            'passwordComplexity.symbol': label + " should contain at least " + symbol + " " + p('symbol', symbol),
            'passwordComplexity.requirementCount': label + " must meet at least " + requirementCount + " of the complexity requirements",
        },
        validate: function (value, helpers) {
            var _a, _b, _c, _d, _e, _f, _g, _h;
            var errors = [];
            if (typeof value === 'string') {
                var lowercaseCount = (_b = (_a = value.match(/[a-z]/g)) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0;
                var upperCaseCount = (_d = (_c = value.match(/[A-Z]/g)) === null || _c === void 0 ? void 0 : _c.length) !== null && _d !== void 0 ? _d : 0;
                var numericCount = (_f = (_e = value.match(/[0-9]/g)) === null || _e === void 0 ? void 0 : _e.length) !== null && _f !== void 0 ? _f : 0;
                var symbolCount = (_h = (_g = value.match(/[^a-zA-Z0-9]/g)) === null || _g === void 0 ? void 0 : _g.length) !== null && _h !== void 0 ? _h : 0;
                var meetsMin = min && value.length >= min;
                var meetsMax = max && value.length <= max;
                var meetsLowercase = lowercaseCount >= (lowerCase);
                var meetsUppercase = upperCaseCount >= (upperCase);
                var meetsNumeric = numericCount >= (numeric);
                var meetsSymbol = symbolCount >= (symbol);
                var maxRequirement = isPositive(lowerCase) + isPositive(upperCase) +
                    isPositive(numeric) + isPositive(symbol);
                var requirement = clamp(requirementCount || maxRequirement, 1, maxRequirement);
                var requirementErrors = [];
                if (!meetsMin)
                    errors.push(helpers.error('passwordComplexity.tooShort', { value: value }));
                if (!meetsMax)
                    errors.push(helpers.error('passwordComplexity.tooLong', { value: value }));
                if (!meetsLowercase) {
                    requirementErrors.push(helpers.error('passwordComplexity.lowercase', { value: value }));
                }
                if (!meetsUppercase) {
                    requirementErrors.push(helpers.error('passwordComplexity.uppercase', { value: value }));
                }
                if (!meetsNumeric) {
                    requirementErrors.push(helpers.error('passwordComplexity.numeric', { value: value }));
                }
                if (!meetsSymbol) {
                    requirementErrors.push(helpers.error('passwordComplexity.symbol', { value: value }));
                }
                if (maxRequirement - requirementErrors.length < requirement) {
                    errors.push.apply(errors, requirementErrors);
                    if (requirement < maxRequirement) {
                        errors.push(helpers.error('passwordComplexity.requirementCount', { value: value }));
                    }
                }
            }
            return {
                value: value,
                errors: errors.length ? errors : null,
            };
        },
    };
    return Joi.extend(joiPasswordComplexity).passwordComplexity();
});

export default index;
//# sourceMappingURL=index.es.js.map
